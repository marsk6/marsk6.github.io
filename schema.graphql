# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  slug: String
  title: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  category: Category
  attachment: UploadPost
  ctime: Float
  date: String
  readingTime: String
  prevArticle: Post
  nextArticle: Post
  brief: String
  content: String
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  tags: TagManyRelationFilter
  category: CategoryWhereInput
  attachment: UploadPostWhereInput
  ctime: FloatNullableFilter
  date: StringFilter
  readingTime: StringFilter
  prevArticle: PostWhereInput
  nextArticle: PostWhereInput
  brief: StringFilter
  content: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  ctime: OrderDirection
  date: OrderDirection
  readingTime: OrderDirection
  brief: OrderDirection
  content: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  slug: String
  title: String
  tags: TagRelateToManyForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  attachment: UploadPostRelateToOneForUpdateInput
  ctime: Float
  date: String
  readingTime: String
  prevArticle: PostRelateToOneForUpdateInput
  nextArticle: PostRelateToOneForUpdateInput
  brief: String
  content: String
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input UploadPostRelateToOneForUpdateInput {
  create: UploadPostCreateInput
  connect: UploadPostWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  slug: String
  title: String
  tags: TagRelateToManyForCreateInput
  category: CategoryRelateToOneForCreateInput
  attachment: UploadPostRelateToOneForCreateInput
  ctime: Float
  date: String
  readingTime: String
  prevArticle: PostRelateToOneForCreateInput
  nextArticle: PostRelateToOneForCreateInput
  brief: String
  content: String
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input UploadPostRelateToOneForCreateInput {
  create: UploadPostCreateInput
  connect: UploadPostWhereUniqueInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Category {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type UploadPost {
  id: ID!
  isLive: Boolean
  uploadTime: String
  attachment: FileFieldOutput
  preview: String
  post: Post
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input UploadPostWhereUniqueInput {
  id: ID
}

input UploadPostWhereInput {
  AND: [UploadPostWhereInput!]
  OR: [UploadPostWhereInput!]
  NOT: [UploadPostWhereInput!]
  id: IDFilter
  isLive: BooleanFilter
  uploadTime: StringFilter
  post: PostWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UploadPostOrderByInput {
  id: OrderDirection
  isLive: OrderDirection
  uploadTime: OrderDirection
  preview: OrderDirection
}

input UploadPostUpdateInput {
  isLive: Boolean
  uploadTime: String
  attachment: FileFieldInput
  preview: String
  post: PostRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadPostUpdateArgs {
  where: UploadPostWhereUniqueInput!
  data: UploadPostUpdateInput!
}

input UploadPostCreateInput {
  isLive: Boolean
  uploadTime: String
  attachment: FileFieldInput
  preview: String
  post: PostRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createUploadPost(data: UploadPostCreateInput!): UploadPost
  createUploadPosts(data: [UploadPostCreateInput!]!): [UploadPost]
  updateUploadPost(where: UploadPostWhereUniqueInput!, data: UploadPostUpdateInput!): UploadPost
  updateUploadPosts(data: [UploadPostUpdateArgs!]!): [UploadPost]
  deleteUploadPost(where: UploadPostWhereUniqueInput!): UploadPost
  deleteUploadPosts(where: [UploadPostWhereUniqueInput!]!): [UploadPost]
}

type Query {
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  uploadPosts(where: UploadPostWhereInput! = {}, orderBy: [UploadPostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UploadPostWhereUniqueInput): [UploadPost!]
  uploadPost(where: UploadPostWhereUniqueInput!): UploadPost
  uploadPostsCount(where: UploadPostWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
