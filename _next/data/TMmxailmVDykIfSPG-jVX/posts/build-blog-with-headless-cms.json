{"pageProps":{"post":{"__typename":"Post","slug":"build-blog-with-headless-cms","title":"用 Headless CMS 管理博客","tags":[{"__typename":"Tag","name":"技术方案"}],"category":null,"ctime":1604401980000,"date":"11-03","content":"\n## 背景\n\n上一篇 [使用 Next.js 搭建个人博客](https://marsk6.github.io/posts/build-blog-with-nextjs) 已经搭建起前端界面，但管理和组织博客内容还很原始，缺少持久化和分类统计，因此需要一个管理后台来管理博客内容，并提供 API 给前端页面调用。\n实现一个管理后台需要\n- 数据库表结构设计\n- 业务逻辑设计及实现（CRUD）\n- 接口设计及实现\n- 产品运营管理后台设计及开发\n- ...\n但我目前不想投入时间从 0-1 实现一个管理后台，因此这里选用 Headless CMS\n\n## 什么是 Headless CMS\n\n如果有了解 Headless Browser（无头浏览器，没有前端界面），那么也可以把 Headless CMS 理解为没有内容展示界面，只有管理后台的 CMS。那意味着同一套 api 服务多个终端。\n![](https://cdn.jsdelivr.net/gh/marsk6/image-center@master/build-blog-with-headless-cms-1.png)\n\n## Keystone\n\nkeystone 和多数 Headless CMS 类似，提供一个管理后台界面和 GraphQL API 用于内容查询。\n\nkeystone 开源，有完善的文档，灵活的关系，强大的过滤功能。\n\n## 集成 keystone\n\n```shell\nyarn add @keystone-6/core\n```\n\n修改 `.gitignore`，添加\n\n```\n.keystone\n```\n\n更新 npm script\n\n```json\n\"scripts\": {\n  ...\n\t\"keystone:start\": \"keystone start\",\n  \"next:dev\": \"next dev -p 4000\",\n  \"postinstall\": \"keystone postinstall\",\n},\n\n```\n\n```shell\nyarn keystone:start\n```\n\n```shell\nyarn next:dev\n```\n\n## 使用 keystone\n\n创建 `keystone.ts`\n\n### 配置 Lists\n\n先定义一个实体，Post、User 都可以被设计成实体，多个实体组成 lists。\n\n定义 Post，包括 slug、title、tags 等字段（[fields](https://keystonejs.com/docs/fields/overview)）\n\n```javascript\nconst Post: Lists.Post = list({\n  fields: {\n    /* 字段名: 字段类型  */\n    slug: text({ isIndexed: 'unique' }),\n    title: text({ validation: { isRequired: true } }),\n    tags: relationship({\n      ref: 'Tag.posts',\n      many: true,\n      ui: { displayMode: 'select' },\n    }),\n  },\n});\n```\n\n![](https://cdn.jsdelivr.net/gh/marsk6/image-center@master/build-blog-with-headless-cms-3.png)\n\n定义 Tag\n\n```JavaScript\nconst Tag = list({\n\tfields: {\n\t\tname: text(),\n\t\tposts: relationship({\n\t\t\tref: 'Post.tags',\n\t\t\tmany: true,\n\t\t\tui: { hideCreate: true },\n\t\t}),\n\t},\n})\n```\n\n最后加到 lists 上\n\n```javascript\nexport default config({\n\t...\n\tlists: { Post, Tag },\n})\n```\n\n![](https://cdn.jsdelivr.net/gh/marsk6/image-center@master/build-blog-with-headless-cms-4.png)\n\n### 调用查询 API\n\nkeystone 对 GraphQL API 进行了封装，对外提供一套函数进行 CRUD\n\n```JavaScript\n{\n\tfindOne({ where: { id }, query }),\n\tfindMany({ where, take, skip, orderBy, query }),\n\tcount({ where }),\n\tcreateOne({ data, query }),\n\tcreateMany({ data, query }),\n\tupdateOne({ where: { id }, data, query }),\n\tupdateMany({ data, query }),\n\tdeleteOne({ where: { id }, query }),\n\tdeleteMany({ where, query }),\n}\n```\n\n调用方式 `query.<listName>`，`listName` 即实体名，例如 `query.Post`、`query.Tag`\n\n获取所有文章\n\n```javascript\nimport { query } from '.keystone/api'; // .keystone 会自动生成\n\nexport async function getAllPosts() {\n  const posts = await query.Post.findMany({\n    orderBy: [{ ctime: 'desc' }],\n    query: 'slug title tags { name } ctime date',\n  });\n  return posts;\n}\n```\n\n### field - relationships\n\nrelationships 是实体的一种 field，用于在不同实体 field 之间建立关联关系\n例如一篇博文会包含 date，tag、category、author 等元信息，当要分开管理时就可以用到 relationships\n例如 Post 可以关联多个 Tag，一个 author 可以有多个 Post\n\n```ts\nconst Post: Lists.Post = list({\n  fields: {\n    tags: relationship({\n      ref: 'Tag.posts',\n      many: true,\n    }),\n  },\n});\n```\n\n![](https://cdn.jsdelivr.net/gh/marsk6/image-center@master/build-blog-with-headless-cms-5.png)\n\nTag 也可以关联多个 Post\n\n```ts\nconst Tag = list({\n  fields: {\n    name: text(),\n    posts: relationship({\n      ref: 'Post.tags',\n      many: true,\n    }),\n  },\n});\n```\n\n![](https://cdn.jsdelivr.net/gh/marsk6/image-center@master/build-blog-with-headless-cms-2.png)\n\n这样就可以通过 keystone 的 api 获取 tag 的种类和一篇 post 关联了哪些 tag 了\n\n## 参考\n\n- [keystone 与 nextjs 集成](https://keystonejs.com/docs/walkthroughs/embedded-mode-with-sqlite-nextjs)\n\n> 本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！\n","prevArticle":{"__typename":"Post","title":"用 Next.js 搭建个人博客","slug":"build-blog-with-nextjs"},"nextArticle":null,"readingTime":"3","brief":"用 next.js 搭建了静态博客，还要做好博客的内容管理，headless cms 是一个很好的选择，利用其现成的 CURD 功能。简单介绍一个 headless cms - keystone，作为我的博客的内容管理器。","toc":"- [背景](#%E8%83%8C%E6%99%AF)\n- [什么是 Headless CMS](#%E4%BB%80%E4%B9%88%E6%98%AF-headless-cms)\n- [Keystone](#keystone)\n- [集成 keystone](#%E9%9B%86%E6%88%90-keystone)\n- [使用 keystone](#%E4%BD%BF%E7%94%A8-keystone)\n  * [配置 Lists](#%E9%85%8D%E7%BD%AE-lists)\n  * [调用查询 API](#%E8%B0%83%E7%94%A8%E6%9F%A5%E8%AF%A2-api)\n  * [field - relationships](#field---relationships)\n- [参考](#%E5%8F%82%E8%80%83)"},"relatedTags":[{"__typename":"Tag","name":"技术方案","posts":[{"__typename":"Post","slug":"intersectionobserver-table-of-content"},{"__typename":"Post","slug":"build-blog-with-nextjs"},{"__typename":"Post","slug":"build-blog-with-headless-cms"}]}]},"__N_SSG":true}