{"pageProps":{"post":{"__typename":"Post","slug":"log-of-reack-hooks-trap","title":"问题记录-记一次 react hooks 闭包陷阱","tags":[{"__typename":"Tag","name":"react-hook"}],"category":null,"ctime":1641563100000,"mtime":0,"date":"01-07","content":"\n\n### 出现闭包陷阱的场景\n\n- 函数里面更新 state 同时使用了 state\n\n```JavaScript\n    const [val, setVal] = useState(0)\n    const fn0 = () => {\n      saveLatestVal(val)\n    }\n    const fn1 = () => {\n      setVal(1)\n      fn0()\n    }\n```\n\n- 有异步，多次变更复杂 state 时\n\n```JavaScript\nconst handleClick = async (key) => {\n\tsetLoadingMap({ ...loadingMap, [key]: true });\n\tawait delay(3000);\n\tsetLoadingMap({ ...loadingMap, [key]: false });\n};\n```\n\n### 解决方案\n\n- 使用 useRef，ref 具有穿透性\n- 用 useEffect，例如在嵌套函数里变更另一个 state，在 useEffect 里执行 saveLatestVal\n\n```JavaScript\n    const [val, setVal] = useState(0)\n    const [version, setVersion] = useState(0)\n    const fn0 = () => {\n      setVersion(1)\n    }\n    const fn1 = () => {\n      setVal(1)\n      fn0()\n    }\n    useEffect(() => saveLatestVal(val), [version])\n```\n\n- 使用 useReducer，分离 state，对异步，多次变更复杂 state 时\n\n```JavaScript\nconst handleClick = async (key) =>\n\tdispatch({ [key]: true });\n\tawait delay(3000);\n\tdispatch({ [key]: false });\n};\n```\n\n> 本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！\n","prevArticle":{"__typename":"Post","title":"问题记录-本地开发用 whistle 做代理","slug":"whistle-proxy-in-local-dev"},"nextArticle":null,"readingTime":"2","brief":"使用 react hooks 遇到状态是旧的，没有更新闭包陷阱，总结出现的场景和修改方法","toc":"- [出现闭包陷阱的场景](#%E5%87%BA%E7%8E%B0%E9%97%AD%E5%8C%85%E9%99%B7%E9%98%B1%E7%9A%84%E5%9C%BA%E6%99%AF)\n- [解决方案](#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)"},"relatedTags":[{"__typename":"Tag","name":"react-hook","posts":[{"__typename":"Post","slug":"log-of-reack-hooks-trap"},{"__typename":"Post","slug":"setState-callback-react-hooks"}]}]},"__N_SSG":true}