{"pageProps":{"post":{"__typename":"Post","slug":"setState-callback-react-hooks","title":"react hooks setState 支持 callback","tags":[{"__typename":"Tag","name":"react-hook"}],"category":null,"ctime":1657530300000,"mtime":1657531080000,"date":"07-11","content":"\n对于 class component，`this.setState(nextState, callback)` 第二个参数 callback，组件更新完成后会执行回调。\n但 react hooks 没有提供类似的功能，因此自定义一个 hook，实现类似的 callback 功能。\n\n```ts title={useCallbackState.ts}\nimport {\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nexport default function useCallbackState<S>(initialState: S | (() => S)) {\n  const cbRef = useRef<Function[]>([]);\n  const [state, setData] = useState(initialState);\n  useEffect(() => {\n    if (cbRef.current.length > 0) {\n      cbRef.current.forEach((cb) => cb());\n      cbRef.current = [];\n    }\n  }, [state]);\n  const setState = useCallback(\n    (nextState: SetStateAction<S>, callback?: Function) => {\n      callback && cbRef.current.push(callback);\n      setData(nextState);\n    },\n    []\n  );\n  return [state, setState] as const;\n}\n```\n\n使用。注意 callback 的作用域链，callback 取到的 state 是旧的。\n\n```ts\nconst Foo = () => {\n  const [state, setState] = useCallbackState(0);\n  function handleClick() {\n    const nextState = state + 1;\n    setState(nextState, () => console.log(nextState))\n  }\n\n  return (\n    <button onClick={handleClick}>+</button>\n  )\n}\n\n```\n\n> [本博客](https://marsk6.github.io/) 所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！\n","prevArticle":null,"nextArticle":{"__typename":"Post","title":"react native 弹窗浮层的管理方式","slug":"react-native-popup-hook"},"readingTime":"1","brief":"class component 的 setState 支持第二个参数 callback，更新完成后会执行回调，react hooks 的 setState 没有提供类似的功能，因此自定义一个 hook，实现类似的 callback 功能。","toc":""},"relatedTags":[{"__typename":"Tag","name":"react-hook","posts":[{"__typename":"Post","slug":"log-of-reack-hooks-trap"},{"__typename":"Post","slug":"setState-callback-react-hooks"}]}]},"__N_SSG":true}