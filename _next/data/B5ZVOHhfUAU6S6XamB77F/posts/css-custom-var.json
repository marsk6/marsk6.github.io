{"pageProps":{"post":{"__typename":"Post","slug":"css-custom-var","title":"CSS 自定义属性","tags":[{"__typename":"Tag","name":"css"}],"category":null,"ctime":1637681223000,"mtime":0,"date":"11-23","content":"\n\n## 背景\n\n1. 原生 CSS 在代码复用方面有所欠缺，例如典型的例子 - 主题，每一个 `font-size`、`color`、`border` 等属性值必须重复编写，若有改动则每一处都要修改。\n2.  `font-size`、`color` 等单纯就是一个值，就像魔术数字，没有语义。\n3. 比较难使用 JS 动态修改，使用 class 不够明确，使用 style 又不能修改 `::after` 等伪元素。\n\n\n\n## 自定义属性(变量)\n\n属性名能够自定义，属性值是任意合法 CSS 值。\n\n属性名以 `--` 开头，大小写敏感，如 `--custom: 15px`，通过 `var(--custom, defaultValue)` 引用\n\n```css\nelement {\n  --main-custom-name: 90px;\n}\nchild {\n  width: var(--main-custom-name, 40px)\n}\n```\n\n默认会被继承，所以定义在 `:root` 伪类下，则所有子元素都可以获取到。\n\n若自定义属性不合法或不存在，会被该属性的默认值替换，例如\n\n```CSS\ndiv {\n  display: var(--layout) // block\n}\n```\n\n\n\n## 通过 JS 设置\n\n```javascript\ndocument.querySelector('.foo').style.getPropertyValue('--primary')\ndocument.querySelector('.foo').style.setProperty('--primary', 'blue')\n```\n\n\n\n## 使用场景\n\n1. 主题\n2. 依赖某个元素或配合一些如 `IntersectionObserver`、`getBoundingClientRect` 动态设置一个元素的样式\n\n## 参考\n\n1. https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties\n\n\n\n> 本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！\n","prevArticle":null,"nextArticle":{"__typename":"Post","title":"CSS Color - HSL 函数","slug":"CSS-color-function-HSL"},"readingTime":"2","brief":"css 自定义属性的使用方式和使用场景","toc":"- [背景](#%E8%83%8C%E6%99%AF)\n- [自定义属性(变量)](#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%8F%98%E9%87%8F)\n- [通过 JS 设置](#%E9%80%9A%E8%BF%87-js-%E8%AE%BE%E7%BD%AE)\n- [使用场景](#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF)\n- [参考](#%E5%8F%82%E8%80%83)"},"relatedTags":[{"__typename":"Tag","name":"css","posts":[{"__typename":"Post","slug":"css-custom-var"},{"__typename":"Post","slug":"CSS-color-function-HSL"}]}]},"__N_SSG":true}