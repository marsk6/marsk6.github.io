{"pageProps":{"post":{"slug":"build-blog-with-nextjs","title":"使用 Next.js 搭建个人博客","tags":[{"name":"zk"}],"category":null,"ctime":1645964243000,"date":"Feb 27","content":"\n现阶段有非常非常多的静态博客生成工具（[site generators](https://jamstack.org/generators/)），Hexo、VuePress、Docusaurus 等等，基本只需把 markdown 文件配置到指定目录，无需编写其他代码即可建站。\n\n本文记录一下使用 next.js 从 0 到 1 搭建一个博客网站的流程。\n\n## 初始化项目\n\n使用 blog-starter-typescript 作为模板创建一个项目\n\n`npx create-next-app my-blog --use-yarn --example \"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\"`\n\n> 模版 [example](https://github.com/vercel/next.js/tree/canary/examples) 是个大仓库，包含了 next.js 与各种技术集成的样例\n\n## 目录结构\n\n```shell\n.\n├── @types\n├── README.md\n├── _posts # 博客 .md 文件\n│   ├── dynamic-routing.md\n│   ├── hello-world.md\n│   └── preview.md\n├── components\n├── lib # 解析 .md 文件，提取文章数据\n│   ├── api.ts\n│   ├── constants.ts\n│   └── markdownToHtml.ts\n├── next-env.d.ts\n├── package.json\n├── pages # blog 各个页面\n│   ├── _app.tsx # 自定义初始化页面\n│   ├── _document.tsx #自定义 html body\n│   ├── index.tsx\n│   └── posts\n├── postcss.config.js\n├── public\n├── styles\n├── tailwind.config.js\n├── tsconfig.json\n└── types\n```\n\n模版是简单的 blog 样例，包含读取解析 markdown 文件、加载文章数据、生成首页、生成 blog 文章页面。\n\n用到的 npm 包：\n\n- `gray-matter` 处理 yaml front matter\n- `remark` 解析 markdown，把 markdown 转成 ast\n- `remark-html` 把 ast 转成 html\n- `tailwindcss` 原子化样式 class，无需头疼组件 class 的命名\n\n## 生成页面\n\n生成的页面对应 pages 目录下的文件，页面的路由为文件路径名，例如 `pages/about.tsx` ，则页面路由为 `/about`。\n\n一般项目的目录都会有 src 目录，所以 next.js 也支持 src/pages 目录。\n\n很明显，不可能为每篇 blog 文章都创建一个文件，那么就需用到**动态路由（dynamic routes）**。\n\n### getStaticPaths\n\n**动态路由**形如 `pages/posts/[slug].tsx`，然后就会生成 `posts/1`, `posts/2`，slug 可以理解为前端路由的路径参数 params。\n\n页面需定义 `getStaticPaths` 方法，必须返回 `params` 参数。\n\n```tsx\n// pages/posts/[slug].tsx\nconst Post = () => {...}\nexport default Post\n\nexport async function getStaticPaths() {\n  const posts = getAllPosts(['slug'])\n  return {\n    paths: posts.map((post) => {\n      return {\n        params: {\n          slug: post.slug,\n        },\n      }\n    }),\n  }\n}\n```\n\n## 获取数据\n\n### getStaticProps\n\n`getStaticProps` 会在服务端执行，因此可以使用 node api，读取文件系统，获取 markdown 内容。\n\n返回值会作为页面组件的 props，入参为 `getStaticPaths`的返回值。\n\n```ts\nconst Post = ({ post, morePosts }: Props) => {\n  return <Layout>...</Layout>;\n};\n\nexport default Post;\n\nexport async function getStaticProps({ params }) {\n  const post = getPostBySlug();\n  const content = await markdownToHtml(post.content || '');\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n    },\n  };\n}\n```\n\n## 定制化\n\n在 pages 下还有 `_app.tsx` 和 `_document.tsx`，这两个文件用于定制化页面。\n\nnext.js 默认使用 `next/app` 初始化页面，`_app.tsx`会替代`next/app`初始化页面，因此可以在 `_app.tsx`放一些公共逻辑，公共的布局，导入样式等。\n\n```tsx\nimport { AppProps } from 'next/app';\nimport 'github-markdown-css/github-markdown-light.css';\nimport '../styles/index.css';\n\nimport Layout from '@/layout';\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n  );\n}\n```\n\n同样，`_document.tsx` 用于为 html、body 做定制化\n\n```tsx\nimport { Html, Head, Main, NextScript } from 'next/document';\n// 必须导入 Html、Head、Main、NextScript，不能省略\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n```\n\n## 结语\n\n一个 blog 的原型基本就搭建起来了，剩余就是部署到静态托管服务上（Vercel、GitHub Page 等），另外可以参照 [example](https://github.com/vercel/next.js/tree/canary/examples)，与其他技术集成，继续美化 blog。\n\n## 参考链接\n\n- [Next.js 官方文档](https://nextjs.org/docs)\n- [学习 Next.js](https://nextjs.org/learn/foundations/about-nextjs?utm_source=next-site&utm_medium=nav-cta&utm_campaign=next-website)","prev":{},"next":{},"readingTime":"5 min read","brief":"用 next.js 搭建个人静态博客","toc":"- [初始化项目](#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE)\n- [目录结构](#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84)\n- [生成页面](#%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2)\n  * [getStaticPaths](#getstaticpaths)\n- [获取数据](#%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE)\n  * [getStaticProps](#getstaticprops)\n- [定制化](#%E5%AE%9A%E5%88%B6%E5%8C%96)\n- [结语](#%E7%BB%93%E8%AF%AD)\n- [参考链接](#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5)"},"relatedTags":[{"name":"zk","posts":[{"slug":"build-blog-with-nextjs"}]}]},"__N_SSG":true}