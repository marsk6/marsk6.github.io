{"pageProps":{"post":{"__typename":"Post","slug":"deploy-blog-to-github-pages","title":"用 Github Pages 部署静态博客","tags":[{"__typename":"Tag","name":"技术方案"}],"category":null,"ctime":1611905340000,"mtime":1660224480000,"date":"01-29","content":"\nGithub Pages 是 Github 提供的免费静态文件托管服务，可以用来部署静态博客。\n\n## 创建仓库\n\n在 Github 上新建一个仓库 `New repository`\n\n![[deploy-blog-to-github-pages.png|新建仓库]]\n\n仓库名字必须是 `<user>.github.io`。设置仓库可见性，要使用 Github Pages，可见性必须是 `Public`\n\n![[deploy-blog-to-github-pages-1.png|配置仓库]]\n\n## 设置 Github Pages\n\n![[deploy-blog-to-github-pages-2.png|设置 github page]]\n\n你可以先创建一个 `gh-pages` 分支（后面部署会用到）\n把 nextjs blog 的构建输出推到 `gh-pages` 分支，分支内的文件目录结构会成为网站的路由路径\n对非 Jekyll 项目，构建输出的根目录还要有 `.nojekyll` 文件（确保静态资源能正确加载）\n\n![[deploy-blog-to-github-pages-3.png|blog 的构建输出]]\n\n如果是 Mac/Linux 用户，在项目 package.json 可添加\n\n```json\n\"postbuild\": \"touch ./<输出目录名>/.nojekyll\"\n```\n\n这时可以访问博客了\n\n## 用 Github Action 部署\n\n上面的步骤是我在本地构建并手动推到 `gh-pages` 分支，但更好的方式是通过 Github Action 自动化部署。\n\n在项目中创建 `.github/workflows/publish.yaml`\n\n```yaml\nname: GitHub Actions Build and Deploy Demo\non:\n  push:\n    branches:\n      - master # 当 master 分之有更新时自动构建部署\npermissions:\n  contents: write\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout 🛎️\n        uses: actions/checkout@v3 # clone 项目代码\n      - name: Cache\n        uses: actions/setup-node@v3 # 设置缓存\n        with:\n          cache: 'yarn'\n      - name: build\n        run: | # 串行执行构建命令\n          yarn\n          yarn build\n      - name: Build and Deploy # 部署到 github pages\n        uses: JamesIves/github-pages-deploy-action@v4 # 用 JamesIves/github-pages-deploy-action 这个 action\n        with:\n          folder: out # nextjs blog 的构建输出目录\n          token: ${{ secrets.ACCESS_TOKEN }} #  为了推到你项目下的 gh-pages 分支，需要你的 github token\n```\n\n创建 ACCESS_TOKEN\n\n1. https://github.com/settings/tokens 记下创建的 token\n2. 设置 ACCESS_TOKEN\n\n![[deploy-blog-to-github-pages-5.png|secrets.ACCESS_TOKEN 配置]]\n\n代码推送到 master 后，就会触发构建部署\n\n![[deploy-blog-to-github-pages-4.png|运行 action]]\n\n## 关联\n\n[创建 GitHub Pages 站点 - GitHub 文档](https://docs.github.com/zh/pages/getting-started-with-github-pages/creating-a-github-pages-site)\n\n> [本博客](https://marsk6.github.io/) 所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！\n","prevArticle":{"__typename":"Post","title":"用 Headless CMS 管理博客","slug":"build-blog-with-headless-cms"},"nextArticle":null,"readingTime":"2","brief":"github pages 是 github 提供的免费静态文件托管服务，可以用来部署静态博客。本文介绍用 next.js 生成的静态博客，部署到 github pages 的过程","toc":"- [创建仓库](#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93)\n- [设置 Github Pages](#%E8%AE%BE%E7%BD%AE-github-pages)\n- [用 Github Action 部署](#%E7%94%A8-github-action-%E9%83%A8%E7%BD%B2)\n- [关联](#%E5%85%B3%E8%81%94)"},"relatedTags":[{"__typename":"Tag","name":"技术方案","posts":[{"__typename":"Post","slug":"intersectionobserver-table-of-content"},{"__typename":"Post","slug":"build-blog-with-nextjs"},{"__typename":"Post","slug":"build-blog-with-headless-cms"},{"__typename":"Post","slug":"deploy-blog-to-github-pages"}]}]},"__N_SSG":true}