{"pageProps":{"post":{"__typename":"Post","slug":"error-boundary-for-custom-error","title":"ErrorBoundary 处理自定义错误","tags":[{"__typename":"Tag","name":"react"}],"category":null,"ctime":1639057680000,"date":"12-09","content":"\n## 背景\n\n[错误边界](https://zh-hans.reactjs.org/docs/error-boundaries.html)是一种 React 组件，这种组件可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI。\n\n错误边界在==渲染期间、生命周期方法和整个组件树的构造函数==中捕获错误。\n\n## 问题\n\n`react` 强调了只有上面 3 种实现下才会捕获错误。\n\n无法自动捕获下面 4 种实现\n\n- 事件处理\n- 异步代码（例如 `setTimeout` 、`Promise`回调函数）\n- 服务端渲染\n- 它自身抛出来的错误（并非它的子组件）\n\n通常希望业务代码能够复用 `ErrorBoundary` 的错误处理逻辑。\n\n## 实现\n\n如果要 `ErrorBoundary` 能处理业务代码的自定义错误，只要在渲染期间抛出错误即可。\n\n### class component\n\n```javascript\ntry {\n  const res = await fetchMayError();\n} catch (err) {\n  this.setState(() => {\n    throw err;\n  });\n}\n```\n\n### hooks\n\n```typescript\nfunction useErrorHandler() {\n  const [error, setError] = React.useState(null);\n  if (error != null) throw error;\n  return setError;\n}\n\nfunction Foo() {\n  const handleError = useErrorHandler();\n  fetchMayError().catch(handleError);\n  return <div></div>;\n}\n```\n\n## Inspired\n\n1. https://github.com/bvaughn/react-error-boundary\n\n> 本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！\n","prevArticle":null,"nextArticle":null,"readingTime":"1","brief":"如何使用 react 的 error boundary 处理所有错误？","toc":"- [背景](#%E8%83%8C%E6%99%AF)\n- [问题](#%E9%97%AE%E9%A2%98)\n- [实现](#%E5%AE%9E%E7%8E%B0)\n  * [class component](#class-component)\n  * [hooks](#hooks)\n- [Inspired](#inspired)"},"relatedTags":[{"__typename":"Tag","name":"react","posts":[{"__typename":"Post","slug":"error-boundary-for-custom-error"}]}]},"__N_SSG":true}